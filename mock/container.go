// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	container "github.com/docker/docker/api/types/container"

	exec "github.com/testcontainers/testcontainers-go/exec"

	io "io"

	mock "github.com/stretchr/testify/mock"

	nat "github.com/docker/go-connections/nat"

	testcontainers "github.com/testcontainers/testcontainers-go"

	time "time"
)

// Container is an autogenerated mock type for the Container type
type Container struct {
	mock.Mock
}

// ContainerIP provides a mock function with given fields: _a0
func (_m *Container) ContainerIP(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ContainerIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ContainerIPs provides a mock function with given fields: _a0
func (_m *Container) ContainerIPs(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ContainerIPs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDirToContainer provides a mock function with given fields: ctx, hostDirPath, containerParentPath, fileMode
func (_m *Container) CopyDirToContainer(ctx context.Context, hostDirPath string, containerParentPath string, fileMode int64) error {
	ret := _m.Called(ctx, hostDirPath, containerParentPath, fileMode)

	if len(ret) == 0 {
		panic("no return value specified for CopyDirToContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, hostDirPath, containerParentPath, fileMode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyFileFromContainer provides a mock function with given fields: ctx, filePath
func (_m *Container) CopyFileFromContainer(ctx context.Context, filePath string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, filePath)

	if len(ret) == 0 {
		panic("no return value specified for CopyFileFromContainer")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, filePath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyFileToContainer provides a mock function with given fields: ctx, hostFilePath, containerFilePath, fileMode
func (_m *Container) CopyFileToContainer(ctx context.Context, hostFilePath string, containerFilePath string, fileMode int64) error {
	ret := _m.Called(ctx, hostFilePath, containerFilePath, fileMode)

	if len(ret) == 0 {
		panic("no return value specified for CopyFileToContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, hostFilePath, containerFilePath, fileMode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CopyToContainer provides a mock function with given fields: ctx, fileContent, containerFilePath, fileMode
func (_m *Container) CopyToContainer(ctx context.Context, fileContent []byte, containerFilePath string, fileMode int64) error {
	ret := _m.Called(ctx, fileContent, containerFilePath, fileMode)

	if len(ret) == 0 {
		panic("no return value specified for CopyToContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte, string, int64) error); ok {
		r0 = rf(ctx, fileContent, containerFilePath, fileMode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Endpoint provides a mock function with given fields: _a0, _a1
func (_m *Container) Endpoint(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Endpoint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Exec provides a mock function with given fields: ctx, cmd, options
func (_m *Container) Exec(ctx context.Context, cmd []string, options ...exec.ProcessOption) (int, io.Reader, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, cmd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 int
	var r1 io.Reader
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, ...exec.ProcessOption) (int, io.Reader, error)); ok {
		return rf(ctx, cmd, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string, ...exec.ProcessOption) int); ok {
		r0 = rf(ctx, cmd, options...)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string, ...exec.ProcessOption) io.Reader); ok {
		r1 = rf(ctx, cmd, options...)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(io.Reader)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, []string, ...exec.ProcessOption) error); ok {
		r2 = rf(ctx, cmd, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FollowOutput provides a mock function with given fields: _a0
func (_m *Container) FollowOutput(_a0 testcontainers.LogConsumer) {
	_m.Called(_a0)
}

// GetContainerID provides a mock function with no fields
func (_m *Container) GetContainerID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContainerID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetLogProductionErrorChannel provides a mock function with no fields
func (_m *Container) GetLogProductionErrorChannel() <-chan error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogProductionErrorChannel")
	}

	var r0 <-chan error
	if rf, ok := ret.Get(0).(func() <-chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan error)
		}
	}

	return r0
}

// Host provides a mock function with given fields: _a0
func (_m *Container) Host(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Host")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Inspect provides a mock function with given fields: _a0
func (_m *Container) Inspect(_a0 context.Context) (*container.InspectResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Inspect")
	}

	var r0 *container.InspectResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*container.InspectResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *container.InspectResponse); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.InspectResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRunning provides a mock function with no fields
func (_m *Container) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Logs provides a mock function with given fields: _a0
func (_m *Container) Logs(_a0 context.Context) (io.ReadCloser, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Logs")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (io.ReadCloser, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) io.ReadCloser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MappedPort provides a mock function with given fields: _a0, _a1
func (_m *Container) MappedPort(_a0 context.Context, _a1 nat.Port) (nat.Port, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for MappedPort")
	}

	var r0 nat.Port
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, nat.Port) (nat.Port, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, nat.Port) nat.Port); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(nat.Port)
	}

	if rf, ok := ret.Get(1).(func(context.Context, nat.Port) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields: _a0
func (_m *Container) Name(_a0 context.Context) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetworkAliases provides a mock function with given fields: _a0
func (_m *Container) NetworkAliases(_a0 context.Context) (map[string][]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for NetworkAliases")
	}

	var r0 map[string][]string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Networks provides a mock function with given fields: _a0
func (_m *Container) Networks(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Networks")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PortEndpoint provides a mock function with given fields: ctx, port, proto
func (_m *Container) PortEndpoint(ctx context.Context, port nat.Port, proto string) (string, error) {
	ret := _m.Called(ctx, port, proto)

	if len(ret) == 0 {
		panic("no return value specified for PortEndpoint")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, nat.Port, string) (string, error)); ok {
		return rf(ctx, port, proto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, nat.Port, string) string); ok {
		r0 = rf(ctx, port, proto)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, nat.Port, string) error); ok {
		r1 = rf(ctx, port, proto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ports provides a mock function with given fields: _a0
func (_m *Container) Ports(_a0 context.Context) (nat.PortMap, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Ports")
	}

	var r0 nat.PortMap
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (nat.PortMap, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) nat.PortMap); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nat.PortMap)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionID provides a mock function with no fields
func (_m *Container) SessionID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SessionID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields: _a0
func (_m *Container) Start(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StartLogProducer provides a mock function with given fields: _a0, _a1
func (_m *Container) StartLogProducer(_a0 context.Context, _a1 ...testcontainers.LogProductionOption) error {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartLogProducer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...testcontainers.LogProductionOption) error); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// State provides a mock function with given fields: _a0
func (_m *Container) State(_a0 context.Context) (*container.State, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for State")
	}

	var r0 *container.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*container.State, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *container.State); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*container.State)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Stop provides a mock function with given fields: _a0, _a1
func (_m *Container) Stop(_a0 context.Context, _a1 *time.Duration) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopLogProducer provides a mock function with no fields
func (_m *Container) StopLogProducer() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for StopLogProducer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Terminate provides a mock function with given fields: ctx, opts
func (_m *Container) Terminate(ctx context.Context, opts ...testcontainers.TerminateOption) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Terminate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ...testcontainers.TerminateOption) error); ok {
		r0 = rf(ctx, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewContainer creates a new instance of Container. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewContainer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Container {
	mock := &Container{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
